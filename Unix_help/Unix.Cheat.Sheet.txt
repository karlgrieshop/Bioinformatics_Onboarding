# basic commands:

# Change directories
cd DIRECTORY_NAME

# View the file one page at a time; to skip to last line of file type 'G'
less -S FILE.txt

# Delete file (-rf needed if you lack certain permissions)
rm -rf FILE.txt

# List the files in a directory (you can type ls DIRECTORY_PATH/DIRECTORY_NAME if it's not your working directory)
ls

# Find the path to a file (most useful when executed in the home directory)
locate FILE.txt

# Tells you the total memory usage of the working directory
du -sh

# Displays all the running processes
top

# Kills a certain process (you can find the process ID by running 'top' first)
kill PROCESS_ID

# Displays lines that contain the specified pattern in the file of interest
grep "pattern" FILE.txt

# for loop format
for i in x y z
do
    echo $i
done

# if/else format 
# (-eq = equal to; -gt = greater than, etc; for more comparison operators: https://tldp.org/LDP/abs/html/comparison-ops.html)
if [[ var -eq 10 ]]; then
    echo "Variable equals 10"
else 
    echo "Variable is not 10"
fi

# if/elif/else format
if [[ var -eq 10 ]]; then
    echo "Variable equals 10"
elif [[ var -eq 15 ]]; then
    echo "Variable equals 15"
else 
    echo "Variable is neither 10 nor 15"
fi

# print out nth column 
awk '{print $n}' FILE.txt

# print out nth column and only print the unique elements (no repetitions)
awk '{print $n}' FILE.txt | uniq > NEWFILE.txt

# remove 1st character from every line
sed 's/^.//' file

# remove lines containing a string
sed '/pattern to match/d' file.tsv

# remove last character from every line
sed 's/.$//' file > file.nolast

# remove lines that have column value less than/greater than 30
awk '($4  > 30)' file.tsv

# retain characters only after a particular string in the entire file
grep -o 'string.*$' list.txt 

# retain lines with first column common to another file
awk 'FNR==NR{a[$1];next}($1 in a){print $0}' file.txt file.tsv > output.tsv

# delete lines with first column common to another file
awk 'FNR==NR{a[$1];next} !($1 in a){print $0}' file.txt file.tsv > output.tsv

# remove every occurrence of a character (here, ") from file
sed 's/"//g' file

# find common lines between 4 files
cat a b c d | sort | uniq -c | sed -n -e 's/^ *4 \(.*\)/\1/p'

# alternative method to find common lines between 2 files using comm
comm -12 <(sort a) <(sort b)

# remove string between two characters (here in example, > and ,)
sed -E 's/>[^,]+,//g' DGRP177.fa 

# remove string after appearance of a character (here, the colon :)
sed 's/\:.*//' file

# remove first 5 lines from file
sed '1,5d' file OR 
tail -n +6 file

# remove last 5 lines from file
head -n -5 file

# skip to a base in fasta file
samtools faidx genome.fa chr1:base_position

# replace whitespace with tab
perl -p -e 's/ /\t/g' file

# check SnpEff database
java -Xmx8g -jar ~/Apps/snpEff/snpEff.jar databases

# download a genome from SnpEff database
java -Xmx8g -jar ~/Apps/snpEff/snpEff.jar download -v dmel_r6.31 &

# run snpeff on a vcf
java -Xmx8g -jar ~/Apps/snpEff/snpEff.jar dmel_r6.31 DGRP177_sp159n_snps_filtered.vcf.gz > test.vcf.gz &

# find number of columns and exit if number is more/less than required
awk -F'\t' 'NF > 12{print; exit}' file

# grep for multiple strings (here, "bla" and "sla")
fgrep -e "bla" -e "sla"

# add header to a file
echo -e "geneID\tA1\tA2" | cat - file1 > file2

# print only rows where a column contains a specific string
awk '{if ($1 == "string") print $0;}' file

# print awk output with field separator "tab"
awk -v OFS='\t' '{print $1, $2}' file.txt

# remove n-1 characters from 5th column
awk -v OFS='\t' '{$5 = substr($5, n); print}' file.txt